{"version":3,"file":"static/js/786.3bbe0ce7.chunk.js","mappings":"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","sources":["webpack://ju/./src/componantStyle/AddQuestions.module.css?0583","webpack://ju/./src/componantStyle/TextQuestions.module.css?197f","pages/Dashboard/MultiQuestions.jsx","pages/Dashboard/TextQuestions.jsx","pages/Dashboard/AddQuestions.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"AddQuestions\":\"AddQuestions_AddQuestions__7O-M4\",\"check\":\"AddQuestions_check__ka8OC\"};","// extracted by mini-css-extract-plugin\nexport default {\"TextQuestions\":\"TextQuestions_TextQuestions__GMDeu\",\"headForm\":\"TextQuestions_headForm__weU+7\",\"submitQuestions\":\"TextQuestions_submitQuestions__B8KWe\"};","import React, { useState } from \"react\";\r\nimport style from \"../../componantStyle/TextQuestions.module.css\";\r\nimport { useUser } from \"../../context/Context\";\r\nimport Joi from \"joi\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nexport default function MultiQuestions() {\r\n  const { direction,noForm } = useUser();\r\n  const [question, setQuestion] = useState({ type: \"radio\", body: \"body\",form:noForm });\r\n  const [errorListDashboard, setErrorListDashboard] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errorDashboard, setErrorDashboard] = useState(null);\r\n  // const [ addSuccess, setAddSuccess ] = useState( null );\r\n  const navigate = useNavigate();\r\n  function handleChange(e) {\r\n    setQuestion((prev) => ({\r\n      ...prev,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  }\r\n  function validationTextAddDashboard() {\r\n    let schema = Joi.object({\r\n      type: Joi.string().required(),\r\n      body: Joi.string().required(),\r\n      body_en: Joi.string().required(),\r\n      body_ar: Joi.string().required(),\r\n      form: Joi.number().required(),\r\n    });\r\n    return schema.validate(question, { abortEarly: false });\r\n  }\r\n  ////////////function submit/////////////\r\n  async function handlesubmit(e) {\r\n    e.preventDefault();\r\n    let responseValidateTextAdd = validationTextAddDashboard();\r\n    if (responseValidateTextAdd.error) {\r\n      setErrorListDashboard([responseValidateTextAdd.error.details]);\r\n    } else {\r\n      setErrorListDashboard(null);\r\n      try {\r\n        //  setAddSuccess( false );\r\n        setLoading(true);\r\n        const response = await fetch(\r\n          \"https://kog.pythonanywhere.com/api/v1/home/questions/\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.getItem(\"token_access\")}`,\r\n            },\r\n            body: JSON.stringify(question),\r\n          }\r\n        );\r\n        const result = await response.json();\r\n        setLoading(false);\r\n        if (result.created_at) {\r\n          //  setAddSuccess(true)\r\n          navigate(\"/dashboard/jops/displayquestionform\");\r\n        } else {\r\n          setErrorDashboard(result);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <form className={style.TextQuestions}>\r\n      {errorListDashboard &&\r\n        errorListDashboard.map((error, index) => (\r\n          <p key={index} className=\"alert alert-warning\">\r\n            {error[index].message}\r\n          </p>\r\n        ))}\r\n      {/* { addSuccess && <p className='alert alert-success'>{ direction===\"EN\"?'Success Added':\"تم الاضافة بنجاح\"}</p>} */}\r\n      <div className={style.headForm}>\r\n        <button className=\"btn btn-secondary\" onClick={handlesubmit}>\r\n          {loading ? (\r\n            <div className=\"spinner-border text-secondary\" role=\"status\">\r\n              <span className=\"sr-only\"></span>\r\n            </div>\r\n          ) : (\r\n            <>{direction === \"EN\" ? \"Add Question\" : \"أضافة سؤال\"} </>\r\n          )}\r\n        </button>\r\n        <button\r\n          className=\"btn btn-secondary\"\r\n          onClick={() => {\r\n            navigate(\"/dashboard/jops\");\r\n          }}\r\n        >\r\n          {direction === \"EN\" ? \"Back\" : \"رجوع\"}\r\n        </button>\r\n      </div>\r\n      {/* <label htmlFor=\"form\">\r\n        {direction === \"EN\" ? \"Enter number form\" : \"ادخل رقم الفورم\"}\r\n      </label>\r\n      <br />\r\n      <input type=\"number\" name=\"form\" id=\"form\" onChange={handleChange} /> */}\r\n      {errorDashboard?.form && (\r\n        <p className=\"error\">{errorDashboard?.form}</p>\r\n      )}\r\n      <label htmlFor=\"body_ar\">\r\n        {\" \"}\r\n        {direction === \"EN\"\r\n          ? \"Enter Question Arabic\"\r\n          : \"اكتب السؤال باللغة العربية\"}{\" \"}\r\n      </label>\r\n      <input type=\"text\" name=\"body_ar\" id=\"body_ar\" onChange={handleChange} />\r\n      <label htmlFor=\"body_en\">\r\n        {\" \"}\r\n        {direction === \"EN\"\r\n          ? \"Enter Question English\"\r\n          : \"اكتب السؤال باللغة الانجليزية\"}{\" \"}\r\n      </label>\r\n      <input type=\"text\" name=\"body_en\" id=\"body_en\" onChange={handleChange} />\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState } from 'react'\r\nimport style from '../../componantStyle/TextQuestions.module.css'\r\nimport { useUser } from '../../context/Context';\r\nimport Joi from 'joi';\r\nimport { useNavigate } from 'react-router-dom';\r\nexport default function TextQuestions() {\r\n  const { direction,noForm } = useUser();\r\n  const [ question, setQuestion ] = useState( { type: 'text', body: 'body',form:noForm } );\r\n   const [errorListDashboard, setErrorListDashboard] = useState(null);\r\n   const [loading, setLoading] = useState(false);\r\n  const [ errorDashboard, setErrorDashboard ] = useState( null );\r\n  // const [ addSuccess, setAddSuccess ] = useState( null );\r\n  const navigate = useNavigate()\r\n   function handleChange(e) {\r\n     setQuestion((prev) => ({\r\n       ...prev,\r\n       [e.target.name]: e.target.value,\r\n     }));\r\n   }\r\n   function validationTextAddDashboard() {\r\n     let schema = Joi.object({\r\n       type: Joi.string().required(),\r\n       body: Joi.string().required(),\r\n       body_en: Joi.string().required(),\r\n       body_ar:Joi.string().required(),\r\n       form:Joi.number().required(),\r\n     });\r\n     return schema.validate(question, { abortEarly: false });\r\n   }\r\n  ////////////function submit/////////////\r\n   async function handlesubmit(e) {\r\n     e.preventDefault();\r\n     let responseValidateTextAdd = validationTextAddDashboard();\r\n     if (responseValidateTextAdd.error) {\r\n       setErrorListDashboard([responseValidateTextAdd.error.details]);\r\n     } else {\r\n       setErrorListDashboard(null);\r\n       try {\r\n        //  setAddSuccess( false );\r\n         setLoading(true);\r\n         const response = await fetch(\r\n           \"https://kog.pythonanywhere.com/api/v1/home/questions/\",\r\n           {\r\n             method: \"POST\",\r\n             headers: {\r\n               \"Content-Type\": \"application/json\",\r\n               Authorization: `Bearer ${localStorage.getItem(\"token_access\")}`,\r\n             },\r\n             body: JSON.stringify(question),\r\n           }\r\n         );\r\n         const result = await response.json();\r\n         setLoading(false);\r\n         if (result.created_at) {\r\n           //  setAddSuccess(true)\r\n           navigate(\"/dashboard/jops/displayquestionform\");\r\n         } else {\r\n           setErrorDashboard(result);\r\n         }\r\n       } catch (error) {\r\n         console.error(error);\r\n       }\r\n     }\r\n   }\r\n  return (\r\n    <form className={style.TextQuestions}>\r\n      {errorListDashboard &&\r\n        errorListDashboard.map((error, index) => (\r\n          <p key={index} className=\"alert alert-warning\">\r\n            {error[index].message}\r\n          </p>\r\n        ) ) }\r\n      {/* { addSuccess && <p className='alert alert-success'>{ direction===\"EN\"?'Success Added':\"تم الاضافة بنجاح\"}</p>} */}\r\n      <div className={style.headForm}>\r\n        <button className=\"btn btn-secondary\" onClick={handlesubmit}>\r\n          {loading ? (\r\n            <div className=\"spinner-border text-secondary\" role=\"status\">\r\n              <span className=\"sr-only\"></span>\r\n            </div>\r\n          ) : (\r\n            <>{direction === \"EN\" ? \"Add Question\" : \"أضافة سؤال\"} </>\r\n          )}\r\n        </button>\r\n        <button\r\n          className=\"btn btn-secondary\"\r\n          onClick={() => {\r\n            navigate(\"/dashboard/jops\");\r\n          }}\r\n        >{ direction===\"EN\"?\"Back\":\"رجوع\"}</button>\r\n      </div>\r\n       {/* <label htmlFor=\"form\">\r\n        {direction === \"EN\" ? \"Enter number form\" : \"ادخل رقم الفورم\"}\r\n      </label>\r\n      <br />\r\n      <input type=\"number\" name=\"form\" id=\"form\" onChange={handleChange} /> */}\r\n       {errorDashboard?.title && (\r\n        <p className=\"error\">{errorDashboard?.title}</p>\r\n       )} \r\n      <label htmlFor=\"body_ar\">\r\n        {\" \"}\r\n        {direction === \"EN\"\r\n          ? \"Enter Question Arabic\"\r\n          : \"اكتب السؤال باللغة العربية\"}{\" \"}\r\n      </label>\r\n      <input type=\"text\" name=\"body_ar\" id=\"body_ar\" onChange={handleChange} />\r\n      <label htmlFor=\"body_en\">\r\n        {\" \"}\r\n        {direction === \"EN\"\r\n          ? \"Enter Question English\"\r\n          : \"اكتب السؤال باللغة الانجليزية\"}{\" \"}\r\n      </label>\r\n      <input type=\"text\" name=\"body_en\" id=\"body_en\" onChange={handleChange} />\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport style from \"../../componantStyle/AddQuestions.module.css\";\r\nimport { useState } from \"react\";\r\nimport MultiQuestions from \"./MultiQuestions\";\r\nimport TextQuestions from \"./TextQuestions\";\r\nexport default function AddQuestions() {\r\n  const [question, setquestion] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div className={style.AddQuestions} >\r\n        <p>اختر نوع السؤال</p>\r\n        <p\r\n          className={question === \"multi\" ? style.check : \"\"}\r\n          onClick={() => setquestion(() => \"multi\")}\r\n        >\r\n          اختار من متعدد\r\n        </p>\r\n        <p\r\n          className={question === \"text\" ? style.check : \"\"}\r\n          onClick={() => setquestion(() => \"text\")}\r\n        >\r\n          مقالي\r\n        </p>\r\n        {question === \"multi\" ? <MultiQuestions /> : \"\"}\r\n        {question === \"text\" ? <TextQuestions /> : \"\"}\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n}\r\n"],"names":["MultiQuestions","direction","noForm","useUser","question","setQuestion","useState","type","body","form","errorListDashboard","setErrorListDashboard","loading","setLoading","errorDashboard","setErrorDashboard","navigate","useNavigate","handleChange","e","prev","target","name","value","_jsxs","className","style","TextQuestions","children","map","error","index","_jsx","message","headForm","onClick","async","preventDefault","responseValidateTextAdd","Joi","required","body_en","body_ar","validate","abortEarly","details","response","fetch","method","headers","Authorization","concat","localStorage","getItem","JSON","stringify","result","json","created_at","console","role","_Fragment","htmlFor","id","onChange","title","AddQuestions","setquestion","check"],"sourceRoot":""}